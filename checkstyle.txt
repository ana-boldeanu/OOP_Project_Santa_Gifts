Starting audit...
[ERROR] D:\GitHub\POO_Proiect1\.\src\checker\Checker.java:9:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] D:\GitHub\POO_Proiect1\.\src\checker\Checker.java:35:30: '19' is a magic number. [MagicNumber]
[ERROR] D:\GitHub\POO_Proiect1\.\src\checker\Checker.java:101:49: '15' is a magic number. [MagicNumber]
[ERROR] D:\GitHub\POO_Proiect1\.\src\checker\Checker.java:101:55: '3' is a magic number. [MagicNumber]
[ERROR] D:\GitHub\POO_Proiect1\.\src\checker\Checker.java:101:59: '4' is a magic number. [MagicNumber]
[ERROR] D:\GitHub\POO_Proiect1\.\src\database\ReceivedGift.java:19:25: Parameter productName should be final. [FinalParameters]
[ERROR] D:\GitHub\POO_Proiect1\.\src\database\ReceivedGift.java:19:45: Parameter price should be final. [FinalParameters]
[ERROR] D:\GitHub\POO_Proiect1\.\src\database\ReceivedGift.java:19:59: Parameter category should be final. [FinalParameters]
[ERROR] D:\GitHub\POO_Proiect1\.\src\database\ReceivedGift.java:25:5: Class 'ReceivedGift' looks like designed for extension (can be subclassed), but the method 'getProductName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReceivedGift' final or making the method 'getProductName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\GitHub\POO_Proiect1\.\src\database\ReceivedGift.java:29:5: Class 'ReceivedGift' looks like designed for extension (can be subclassed), but the method 'getPrice' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReceivedGift' final or making the method 'getPrice' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\GitHub\POO_Proiect1\.\src\database\ReceivedGift.java:33:5: Class 'ReceivedGift' looks like designed for extension (can be subclassed), but the method 'getCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReceivedGift' final or making the method 'getCategory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\GitHub\POO_Proiect1\.\src\database\ReceivedGift.java:37:5: Class 'ReceivedGift' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ReceivedGift' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\GitHub\POO_Proiect1\.\src\distribution_strategies\ChildScoreDistribution.java:1:9: Name 'distribution_strategies' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\GitHub\POO_Proiect1\.\src\distribution_strategies\CityScoreDistribution.java:1:9: Name 'distribution_strategies' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\GitHub\POO_Proiect1\.\src\distribution_strategies\DistributionStrategy.java:1:9: Name 'distribution_strategies' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\GitHub\POO_Proiect1\.\src\distribution_strategies\DistributionStrategyFactory.java:1:9: Name 'distribution_strategies' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\GitHub\POO_Proiect1\.\src\distribution_strategies\DistributionStrategyFactory.java:4:5: Class 'DistributionStrategyFactory' looks like designed for extension (can be subclassed), but the method 'createStrategy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DistributionStrategyFactory' final or making the method 'createStrategy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\GitHub\POO_Proiect1\.\src\distribution_strategies\DistributionStrategyFactory.java:4:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\GitHub\POO_Proiect1\.\src\distribution_strategies\DistributionStrategyFactory.java:4:48: Parameter strategy should be final. [FinalParameters]
[ERROR] D:\GitHub\POO_Proiect1\.\src\distribution_strategies\IdDistribution.java:1:9: Name 'distribution_strategies' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\GitHub\POO_Proiect1\.\src\fileio\InputLoader.java:34:5: Method length is 179 lines (max allowed is 150). [MethodLength]
[ERROR] D:\GitHub\POO_Proiect1\.\src\score_strategies\AverageScoreStrategy.java:1:9: Name 'score_strategies' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\GitHub\POO_Proiect1\.\src\score_strategies\AverageStrategyFactory.java:1:9: Name 'score_strategies' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\GitHub\POO_Proiect1\.\src\score_strategies\BabyAverageScore.java:1:9: Name 'score_strategies' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\GitHub\POO_Proiect1\.\src\score_strategies\KidAverageScore.java:1:9: Name 'score_strategies' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\GitHub\POO_Proiect1\.\src\score_strategies\TeenAverageScore.java:1:9: Name 'score_strategies' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\GitHub\POO_Proiect1\.\src\score_strategies\YoungAdultAverageScore.java:1:9: Name 'score_strategies' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] D:\GitHub\POO_Proiect1\.\src\simulation\output\ChildOutput.java:3:8: Unused import - database.GiftType. [UnusedImports]
[ERROR] D:\GitHub\POO_Proiect1\.\src\simulation\Round.java:4:16: Using the '.*' form of import should be avoided - database.*. [AvoidStarImport]
Audit done.
Checkstyle ends with 29 errors.
